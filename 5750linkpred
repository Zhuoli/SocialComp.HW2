#!/usr/bin/python
import basNetPredict as net
import sys
# get edgelist
edgelist,nodes = net.file2edgelist(sys.argv) 
# get graph
G = net.edgelist2graph(edgelist)
# get scc and wcc
scc,wcc = net.getSubGraph(G)
# number
number = int(sys.argv[2])
#return expected to link links  with Triadic Closure  method
linksInSCC = net.getPredictionInSCC(scc,number)
# print prediction and error handling
length = len(linksInSCC)
if length > 0:
  print "Links in SCC"
  print 'Expected number is: ' + str(number), 'size of links in SCC is:  ' + str(length)
  net.prints(linksInSCC)
else:
  print "Didn't get prediction links in SCC"
# if predicted links is less than requirement, go in WCC prediction
if length < number:
  number = number - length
  linksInWCC = net.getPredictionInWCC(wcc,number)
  linksInWCC = net.getOutDuplicateFrom(linksInWCC,linksInSCC)
  if len(linksInWCC) > 0:
    print "Links In WCC"
    net.prints(linksInWCC)
  else:
    print "Didn't get prediction links in WCC"

